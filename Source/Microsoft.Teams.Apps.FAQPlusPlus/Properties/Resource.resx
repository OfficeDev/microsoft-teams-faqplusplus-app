<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AskAnExpertPlaceholderText" xml:space="preserve">
    <value>Type your detailed question and supporting details here.</value>
    <comment>Ask an expert placeholder text.</comment>
  </data>
  <data name="AskAnExpertText1" xml:space="preserve">
    <value>Ask an expert</value>
    <comment>Title of the ask an expert card.</comment>
  </data>
  <data name="AskAnExpertText2" xml:space="preserve">
    <value>We have our experts to assist you better on any of your questions. You can always connect to our Experts.</value>
    <comment>Helps the user in understanding there is an expert team to connect to.</comment>
  </data>
  <data name="FeedbackText1" xml:space="preserve">
    <value>We would love to hear a feedback from you on how we are performing.</value>
    <comment>Text suggests that user is invited to share his feedback on his experience using bot.</comment>
  </data>
  <data name="FunctionCardText1" xml:space="preserve">
    <value>Ask a question!</value>
    <comment>Explains what bot does and possible questions.</comment>
  </data>
  <data name="FunctionCardText2" xml:space="preserve">
    <value>I am your QnA bot, you can ask me a question and I will answer you back if I know the answer.</value>
    <comment>Suggests the user to ask question.</comment>
  </data>
  <data name="ShareFeedbackButtonText" xml:space="preserve">
    <value>Share feedback</value>
    <comment>Button text for share feedback show card in QnA response card.</comment>
  </data>
  <data name="DescriptionText" xml:space="preserve">
    <value>Description: </value>
    <comment>Description text is the label of description text box.</comment>
  </data>
  <data name="FeedbackDescriptionPlaceholderText" xml:space="preserve">
    <value>Enter your feedback and supporting details here.</value>
    <comment>Placeholder label where the user enters feedback in the text box.</comment>
  </data>
  <data name="FeedbackHeaderText" xml:space="preserve">
    <value>Share app feedback</value>
    <comment>Share feedback card title text- bot menu command.</comment>
  </data>
  <data name="QuestionLineText" xml:space="preserve">
    <value>Here is what I have found for your request</value>
    <comment>Shows user requested question.</comment>
  </data>
  <data name="StatusFactTitle" xml:space="preserve">
    <value>Status: </value>
    <comment>Status one of the available fact set in notification cards.</comment>
  </data>
  <data name="AskAnExpertButtonText" xml:space="preserve">
    <value>Ask an expert</value>
    <comment>Action button which invokes ask an expert show card.</comment>
  </data>
  <data name="ThankYouAdaptiveCardContent" xml:space="preserve">
    <value>Thank you for your feedback.\n\n You are helping me become more helpful. I will share it with experts.</value>
    <comment>The content for the thank you adaptive card which is shown whenever user submits feedback on the app or on a response that is generated by QnA service.</comment>
  </data>
  <data name="ThankYouAdaptiveCardTitleText" xml:space="preserve">
    <value>Thank you!</value>
    <comment>The title text for the thank you adaptive card which is shown whenever there is feedback captured about the app or about a response.</comment>
  </data>
  <data name="ChatTextButton" xml:space="preserve">
    <value>Chat with {0}</value>
    <comment>Ability to chat directly with end user from SME channel.</comment>
  </data>
  <data name="NotificationAdaptiveCardContent" xml:space="preserve">
    <value>Your question has been shared with the SME team. They will directly send you a chat message. </value>
    <comment>Confirmation message to the user upon asking question to the expert.</comment>
  </data>
  <data name="NotificationCardTitleText" xml:space="preserve">
    <value>Notification</value>
    <comment>Confirmation Card Header Text.</comment>
  </data>
  <data name="TeamChatHeaderText" xml:space="preserve">
    <value>Initiate chat with users</value>
    <comment>Team carousel chat card header-title of the chat card.</comment>
  </data>
  <data name="TeamChatCardContent" xml:space="preserve">
    <value>As an SME, you can initiate chat directly with the end user, by clicking on chat button.</value>
    <comment>Team carousel chat card content- SME team members can chat directly with the end users.</comment>
  </data>
  <data name="TeamFunctionCardHeaderText" xml:space="preserve">
    <value>Notification from the users</value>
    <comment>Team carousel function card content- title of the chat card.</comment>
  </data>
  <data name="TeamFunctionCardContent" xml:space="preserve">
    <value>SME channel receives feedback from the users on the app performance or can ask a question to the SME channel.</value>
    <comment>Team carousel function card content- team can take the question from the end users through bot.</comment>
  </data>
  <data name="TeamQueryHeaderText" xml:space="preserve">
    <value>Ticket system</value>
    <comment>Title of the query carousel card- ticket system.</comment>
  </data>
  <data name="TeamQueryCardContent" xml:space="preserve">
    <value>You can keep track of the user requests using the status assigned or closed.</value>
    <comment>Team carousel query card content- team can keep track of the user request.</comment>
  </data>
  <data name="TakeATeamTourButtonText" xml:space="preserve">
    <value>Team tour</value>
    <comment>Action button which gives tour for the team on bot Functionalities.</comment>
  </data>
  <data name="WelcomeTeamCardTitleText" xml:space="preserve">
    <value>Hello {0} !</value>
    <comment>Introduces Welcome, with team name where placeholder {0} holds the name of the team bot is being added to.</comment>
  </data>
  <data name="WelcomeTeamCardContent" xml:space="preserve">
    <value>Hi! I am {0}, thank you for having me in your SME team!. I am a friendly HR bot can be used by any team or individual within the org. As an SME you and your team members can do following things using bot.\n- Can Self assign the tickets raised by the users.\n- Can directly chat with end user using chat buttons.\n- Your team can keep track of all the user queries using status fields like open assign and close.</value>
    <comment>Welcome message when bot is added to a new team.</comment>
  </data>
  <data name="CustomMessage" xml:space="preserve">
    <value>I didn't find anything apt for your request. \n\n Do you want me to ask an expert?</value>
    <comment>Message when user asks random question to the bot.</comment>
  </data>
  <data name="QuestionText" xml:space="preserve">
    <value>Question asked:</value>
    <comment>Pre-filled question text.</comment>
  </data>
  <data name="SubmitButtonText" xml:space="preserve">
    <value>Submit</value>
    <comment>Button to submit user activity.</comment>
  </data>
  <data name="QuestionForExpertSubHeaderText" xml:space="preserve">
    <value>**{0}** is requesting support. Details are as follows:</value>
    <comment>Text says that user is asking a question to the expert, placeholder holds the name of the person.</comment>
  </data>
  <data name="Resultsfeedbackdetails" xml:space="preserve">
    <value>Enter feedback for above result</value>
    <comment>Label for share feedback show card where user enters feedback on the displayed results in QnA response card.</comment>
  </data>
  <data name="TeamCustomMessage" xml:space="preserve">
    <value>Hi SME Team, you are supposed to take questions from the user. If you want to ask me a question, please install me in your personal scope. To know better about me please do team tour.</value>
    <comment>When SME team member asks bot a questions- a message appears saying that team member is supposed to install the bot in personal scope.</comment>
  </data>
  <data name="AssignStatusText" xml:space="preserve">
    <value>Assign</value>
    <comment>Status of the user ticket- assign</comment>
  </data>
  <data name="CloseStatusText" xml:space="preserve">
    <value>Close</value>
    <comment>Status of the user Ticket- Close.</comment>
  </data>
  <data name="ChangeStatusButtonText" xml:space="preserve">
    <value>Change status</value>
    <comment>Text on change status button.</comment>
  </data>
  <data name="ResponseHeaderText" xml:space="preserve">
    <value>Here is what I found:</value>
    <comment>Response header-letting the user know that a response is generated to their request from QnA maker.</comment>
  </data>
  <data name="ClosedFactTitle" xml:space="preserve">
    <value>Closed: </value>
    <comment>Closed fact title is one of the available fact set.</comment>
  </data>
  <data name="DateCreatedDisplayFactTitle" xml:space="preserve">
    <value>Created: </value>
    <comment>Created: one of the available fact set in notification cards- created is the title for created date value.</comment>
  </data>
  <data name="ShowCardTitleText" xml:space="preserve">
    <value>Enter short title here</value>
    <comment>Label text where users enters title for his question or feedback. </comment>
  </data>
  <data name="TitleText" xml:space="preserve">
    <value>Title: </value>
    <comment>Title: title where user enters title for their request.</comment>
  </data>
  <data name="KBEntryText" xml:space="preserve">
    <value>Knowledge base entry:</value>
    <comment>Answer from the QnA maker.</comment>
  </data>
  <data name="AppFeedbackText" xml:space="preserve">
    <value>App feedback</value>
    <comment>This text is used as title for app feedback type card.</comment>
  </data>
  <data name="MandatoryFieldText" xml:space="preserve">
    <value>Title field is mandatory.</value>
    <comment>Text that suggest users to fill mandatory fields.</comment>
  </data>
  <data name="QuestionForExpertText" xml:space="preserve">
    <value>Question for expert</value>
    <comment>This text is used as title for question for expert type card.</comment>
  </data>
  <data name="ResultsFeedbackText" xml:space="preserve">
    <value>Results feedback</value>
    <comment>This text is used as title for results feedback card.</comment>
  </data>
  <data name="IncomingFeedbackSubHeaderText" xml:space="preserve">
    <value>**{0}** is sharing feedback. Details as follows:</value>
    <comment>The sub header for the incoming app feedback adaptive card. The placeholder {0} represents the name of the person sharing the feedback. The placeholder {1} represents the feedback type.</comment>
  </data>
  <data name="ShareFeedbackTitleText" xml:space="preserve">
    <value>Share feedback</value>
    <comment>Title text of share feedback user carousel card.</comment>
  </data>
  <data name="AskAnExpertDisplayText" xml:space="preserve">
    <value>Ask an expert</value>
    <comment>Ask an expert display text: text sent to the bot when ask an expert button is clicked.</comment>
  </data>
  <data name="NotApplicable" xml:space="preserve">
    <value>N/A</value>
    <comment>Not applicable is used in scenarios like- ask an expert or share app feedback bot menu command where there is no question and answer from QnA service and to reflect the same in respective fields N/A is used.</comment>
  </data>
  <data name="ShareFeedbackDisplayText" xml:space="preserve">
    <value>Share feedback</value>
    <comment>Share feedback display text: text sent to the bot when share feedback button is clicked.</comment>
  </data>
  <data name="OpenStatusValue" xml:space="preserve">
    <value>Open</value>
    <comment>Status value is open which is used in notification cards to both SME team and user.</comment>
  </data>
  <data name="AssignedToStatusValue" xml:space="preserve">
    <value>Assigned to {0}</value>
    <comment>"Assigned to" format string, {0} is the name of the assignee</comment>
  </data>
  <data name="ClosedByStatusValue" xml:space="preserve">
    <value>Closed by {0}</value>
    <comment>"Closed" format string, {0} is the name of the user who closed the ticket</comment>
  </data>
  <data name="SMEAssignedStatus" xml:space="preserve">
    <value>The request is now assigned. Assigned by {0}.</value>
    <comment>Message posted to the thread when the ticket is assigned. {0} = name of SME who assigned the request.</comment>
  </data>
  <data name="SMEClosedStatus" xml:space="preserve">
    <value>The request is now closed. Closed by {0}.</value>
    <comment>Message posted to the thread when the ticket is closed. {0} = name of SME who closed the request.</comment>
  </data>
  <data name="SMEOpenedStatus" xml:space="preserve">
    <value>The request is now open. Reopened by {0}. </value>
    <comment>Message posted to the thread when the ticket is reopened. {0} = name of SME who reopened the request.</comment>
  </data>
  <data name="NonApplicableString" xml:space="preserve">
    <value>N/A</value>
  </data>
  <data name="AssignedTicketUserNotification" xml:space="preserve">
    <value>Your request has been assigned to an expert. They will directly send you a chat message.</value>
    <comment>Notification text sent to the user who opened a ticket, when the ticket is assigned to an expert.</comment>
  </data>
  <data name="ClosedTicketUserNotification" xml:space="preserve">
    <value>Your request has been closed. Please ask an expert again if you still need more assistance or have a new request.</value>
    <comment>Notification text sent to the user who opened a ticket, when the ticket is closed.</comment>
  </data>
  <data name="ReopenedTicketUserNotification" xml:space="preserve">
    <value>Your request has been reopened. An expert will directly send you a chat message.</value>
    <comment>Notification text sent to the user who opened a ticket, when the ticket is reopened.</comment>
  </data>
</root>