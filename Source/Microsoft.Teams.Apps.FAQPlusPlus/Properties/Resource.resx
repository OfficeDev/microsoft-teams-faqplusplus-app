<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AskAnExpertFunctionText" xml:space="preserve">
    <value>You can always ask me to connect to an expert, an expert will connect with you:\n Ask an Expert.</value>
    <comment>Letting the user to know about Ask an Expert service.</comment>
  </data>
  <data name="AskAnExpertPlaceholderText" xml:space="preserve">
    <value>Type your detailed question and supporting details here.</value>
    <comment>Ask an Expert placeholder text</comment>
  </data>
  <data name="AskAnExpertText1" xml:space="preserve">
    <value>Ask an expert</value>
    <comment>Title of the Ask An Expert Card.</comment>
  </data>
  <data name="AskAnExpertText2" xml:space="preserve">
    <value>We have our experts to assist you better  on any of your questions. You can always connect to our Experts.</value>
    <comment>Helps the user in understandig, there is an expert team to connect to.</comment>
  </data>
  <data name="FeedbackText1" xml:space="preserve">
    <value>We would love to hear a feedback from you on how we are performing.</value>
    <comment>Text suggests that user is invited to share his feedback on his expereince using bot.</comment>
  </data>
  <data name="FeedbackText2" xml:space="preserve">
    <value>If your experience is unhappy give us the details you have for your question,like your assigned ticket #, one of our experts will connect with you.</value>
    <comment>Asking user for details of his ticket in the event of bad experience or unresolved issues.</comment>
  </data>
  <data name="FunctionCardText1" xml:space="preserve">
    <value>Ask a question!</value>
    <comment>Explains what bot does and possible questions.</comment>
  </data>
  <data name="FunctionCardText2" xml:space="preserve">
    <value>I am your QnA bot, you can ask me a question and I will answer you back if I know the answer.</value>
    <comment>Suggests the User to ask Question</comment>
  </data>
  <data name="FunctionTopicsText" xml:space="preserve">
    <value>Ask me questions  like:</value>
    <comment>Title Text for the Questions to be asked.</comment>
  </data>
  <data name="MessageText1" xml:space="preserve">
    <value>Here is what I can help you with:</value>
    <comment>MessageLine</comment>
  </data>
  <data name="MessageText2" xml:space="preserve">
    <value>If you are curious about what I can do, just type @FAQBot and I will present the list of commands that I can understand.</value>
    <comment>Message Line to know more about the Bot Functionalities</comment>
  </data>
  <data name="SendDisplayText" xml:space="preserve">
    <value>Send</value>
    <comment>Send button text</comment>
  </data>
  <data name="ShareFeedbackButtonText" xml:space="preserve">
    <value>Share feedback</value>
    <comment>Button text for share feedback show card in QnA response card.</comment>
  </data>
  <data name="TakeATourButtonText" xml:space="preserve">
    <value>Take a tour</value>
    <comment>Action Button which gives Tour for Bot Functionalities.</comment>
  </data>
  <data name="DescriptionText" xml:space="preserve">
    <value>Description: </value>
    <comment>Description text is the lable of description text box.</comment>
  </data>
  <data name="FeedbackDescriptionPlaceholderText" xml:space="preserve">
    <value>Type your detailed feedback and supporting details here.</value>
    <comment>Placeholder label where the user enters feedback in the text box.</comment>
  </data>
  <data name="FeedbackHeaderText" xml:space="preserve">
    <value>Share app feedback</value>
    <comment>Share feedback card title text- bot menu command.</comment>
  </data>
  <data name="AnswerLineText" xml:space="preserve">
    <value>Here is what I found : {0}</value>
    <comment>Answer from the Bot</comment>
  </data>
  <data name="QuestionLineText" xml:space="preserve">
    <value>Here is what I have found for your request</value>
    <comment>Shows user requested question</comment>
  </data>
  <data name="StatusFactTitle" xml:space="preserve">
    <value>Status: </value>
    <comment>Status one of the availble fact set in notification cards.</comment>
  </data>
  <data name="AskAnExpertButtonText" xml:space="preserve">
    <value>Ask an expert</value>
    <comment>Action Button which invokes ask an expert show card.</comment>
  </data>
  <data name="IncomingAppFeedbackDetailsText" xml:space="preserve">
    <value>Details: {0}</value>
    <comment>The exact details for the incoming app feedback. The placeholder {0} represents the detailed feedback which the user has provided.</comment>
  </data>
  <data name="IncomingAppFeedbackSubjectLine" xml:space="preserve">
    <value>Subject: {0}</value>
    <comment>The subject line for the incoming app feedback adaptive card - and the placeholder {0} represents the exact feedback type</comment>
  </data>
  <data name="SendButtonText" xml:space="preserve">
    <value>App feedback</value>
    <comment>Button for submitting app feedback.</comment>
  </data>
  <data name="ThankYouAdaptiveCardContent" xml:space="preserve">
    <value>Thank you for your feedback.\n\nYou are helping me become more helpful. I will share it with experts.</value>
    <comment>The content for the thank you adaptive card which is shown whenever there is feedback captured about the app or about a response.</comment>
  </data>
  <data name="ThankYouAdaptiveCardTitleText" xml:space="preserve">
    <value>Thank you!</value>
    <comment>The title text for the thank you adaptive card which is shown whenever there is feedback captured about the app or about a response.</comment>
  </data>
  <data name="ChatTextButton" xml:space="preserve">
    <value>Chat with {0}</value>
    <comment>Ability to chat directy with end user from SME channel.</comment>
  </data>
  <data name="ShareAppFeedbackButtonText" xml:space="preserve">
    <value>Share app feedback</value>
    <comment>App Feedback Submit Button Title</comment>
  </data>
  <data name="NotificationAdaptiveCardContent" xml:space="preserve">
    <value>Your question has been shared with the SME team.They will directly send you a chat message</value>
    <comment>Confirmation Message to the user upon asking question to the expert.</comment>
  </data>
  <data name="NotificationCardTitleText" xml:space="preserve">
    <value>Notification</value>
    <comment>Confirmation Card Header Text.</comment>
  </data>
  <data name="TeamChatHeaderText" xml:space="preserve">
    <value>Initiate chat with users</value>
    <comment>Team carousel  Chat Card Header-  Title of the chat card.</comment>
  </data>
  <data name="TeamChatCardContent" xml:space="preserve">
    <value>As an SME, you can initiate chat directly with the end user, by clicking on chat button.</value>
    <comment>Team carousel Chat Card content-  SME team members can chat directly with the end users.</comment>
  </data>
  <data name="TeamFunctionCardHeaderText" xml:space="preserve">
    <value>Notification from the users</value>
    <comment>Team carousel Function Card content- Title of the chat card.</comment>
  </data>
  <data name="TeamFunctionCardContent" xml:space="preserve">
    <value>SME channel receives feedback  from the users on the app performance or can ask a question  to the SME channel.</value>
    <comment>Team carousel Function card content- Team can take the question from the end users through bot.</comment>
  </data>
  <data name="TeamQueryHeaderText" xml:space="preserve">
    <value>Ticket system</value>
    <comment>Title of the Query Carousel Card- Ticket system.</comment>
  </data>
  <data name="TeamQueryCardContent" xml:space="preserve">
    <value>You can keep track of the user requests using the status assigned or closed.</value>
    <comment>Team carousel Query card content- Team can keep track of the user request.</comment>
  </data>
  <data name="TakeATeamTourButtonText" xml:space="preserve">
    <value>Team tour</value>
    <comment>Action Button which gives Tour for the team about Bot Functionalities.</comment>
  </data>
  <data name="WelcomeTeamCardTitleText" xml:space="preserve">
    <value>Hello {0} !</value>
    <comment>Introduces Welcome, with team name in the placeholder {0}</comment>
  </data>
  <data name="WelcomeTeamCardContent" xml:space="preserve">
    <value>Hi! I am {0}, thank you for having me in your SME team!.I am a  friendly HR bot can be used by  any team or individual within the org. As an SME, you and your team memebers can do following things using bot.\n- Can Self assign the tickets raised by the users.\n- Can directly chat with end user using chat buttons.\n- Your team can keep track of all the user queries using staus fields like open assign and close.</value>
    <comment>Welcome Message when bot is added to a new team.</comment>
  </data>
  <data name="CustomMessage" xml:space="preserve">
    <value>I didn't find anything apt for your request. Do you want me to ask an expert?</value>
    <comment>Message when user asks random question to the bot.</comment>
  </data>
  <data name="ResultAnswerText" xml:space="preserve">
    <value>{0}</value>
    <comment>Pre-filled Answer Text</comment>
  </data>
  <data name="QuestionText" xml:space="preserve">
    <value>Question asked:</value>
    <comment>Pre-filled Question Text</comment>
  </data>
  <data name="SubmitButtonText" xml:space="preserve">
    <value>Submit</value>
    <comment>Button to submit user activity.</comment>
  </data>
  <data name="QuestionForExpertSubHeaderText" xml:space="preserve">
    <value>{0} has asked a question, it's important to take a look at their inquiry!</value>
    <comment>Text says that user is asking a question to the expert, placeholder holds the name f the person.</comment>
  </data>
  <data name="Resultsfeedbackdetails" xml:space="preserve">
    <value>Enter feedback for above result</value>
    <comment>Label for share feedback show card  where user enters feedback on the displayed results in QnA response card.</comment>
  </data>
  <data name="TeamCustomMessage" xml:space="preserve">
    <value>Hi SME Team, you are supposed to take questions from the user. If you want to ask me a question, please install me in your personal scope.To know better about me please  do Team Tour.</value>
    <comment>When SME team member asks bot a questions- a message appears saying that team member is supposed to isntall the bot in personal scope.</comment>
  </data>
  <data name="AssignStatusText" xml:space="preserve">
    <value>Assign</value>
    <comment>Staus of the user Ticket- Assign</comment>
  </data>
  <data name="CloseStatusText" xml:space="preserve">
    <value>Close</value>
    <comment>Staus of the user Ticket- Close</comment>
  </data>
  <data name="OpenStatusText" xml:space="preserve">
    <value>Open</value>
    <comment>Staus of the user Ticket- Open</comment>
  </data>
  <data name="ChangeStatusButtonText" xml:space="preserve">
    <value>Status</value>
    <comment>Text on Status button.</comment>
  </data>
  <data name="AskAnExpertShowCardLabel" xml:space="preserve">
    <value>We can take your question on this response please enter below.</value>
    <comment>Ask an expert show card label text where user can enter his question for Qna response.</comment>
  </data>
  <data name="ResponseHeaderText" xml:space="preserve">
    <value>Here is what I have found for your request</value>
    <comment>Response Header-Letting the user know that a response is generated for their request to the QnA maker</comment>
  </data>
  <data name="ClosedFactTitle" xml:space="preserve">
    <value>Closed: </value>
    <comment>Closed fact title is one of the available fact set</comment>
  </data>
  <data name="DateCreatedDisplayFactTitle" xml:space="preserve">
    <value>Created: </value>
    <comment>Created: One of the available fatc set in notification cards- created is the title for created date value.</comment>
  </data>
  <data name="ShowCardTitleText" xml:space="preserve">
    <value>Enter short title here</value>
    <comment>Label text where users enters title for his question or feedback </comment>
  </data>
  <data name="TitleText" xml:space="preserve">
    <value>Title: </value>
    <comment>Title: title where user enters title for their request.</comment>
  </data>
  <data name="KBEntryText" xml:space="preserve">
    <value>Knowledge base entry:</value>
    <comment>Answer from the QnA maker.</comment>
  </data>
  <data name="AppFeedbackText" xml:space="preserve">
    <value>App feedback</value>
    <comment>This text is used as title for app feedback type card.</comment>
  </data>
  <data name="BulletFactTitle" xml:space="preserve">
    <value>*</value>
    <comment>A bullet point.</comment>
  </data>
  <data name="MandatoryFieldsText" xml:space="preserve">
    <value>All Fields are mandatory</value>
    <comment>Text that suggest users to fill all mandatory fields.</comment>
  </data>
  <data name="QuestionForExpertText" xml:space="preserve">
    <value>Question for expert</value>
    <comment>This text is used as title for question for expert type card.</comment>
  </data>
  <data name="ResultsFeedbackText" xml:space="preserve">
    <value>Results feedback</value>
    <comment>This text is used as title for results feedback card.</comment>
  </data>
  <data name="WelcomeMessageBulletText1" xml:space="preserve">
    <value>How many new employees are joining?</value>
    <comment>One of the available bot help services-ask bot how many employees are joining.</comment>
  </data>
  <data name="WelcomeMessageBulletText2" xml:space="preserve">
    <value>Which employee is yet to submit their profile?</value>
    <comment>One of the available bot help services-ask bot about the employees who are yet to submit their profiles.</comment>
  </data>
  <data name="WelcomeMessageBulletText3" xml:space="preserve">
    <value>What policies and benefits are available? Which employees are leaving the company?</value>
    <comment>One of the available bot help services-ask bot about the available benifits of the company.</comment>
  </data>
  <data name="WelcomeMessageBulletText4" xml:space="preserve">
    <value>Which employees are leaving the company?</value>
    <comment>One of the available bot help services-ask bot about the employees who are leaving.</comment>
  </data>
  <data name="EmailPlaceholderText" xml:space="preserve">
    <value>{0}</value>
    <comment>Placeholder to hold Email of a person.</comment>
  </data>
  <data name="IncomingFeedbackSubHeaderText" xml:space="preserve">
    <value>{0} shares {1}. The details are as follows:</value>
    <comment>The subheader for the incoming app feedback adaptive card. The placeholder {0} represents the name of the person sharing the feedback. The placeholder {1} represents the feedback type.</comment>
  </data>
  <data name="NamePlaceholderText" xml:space="preserve">
    <value>{0}</value>
    <comment>Placeholder to hold the name of the person.</comment>
  </data>
  <data name="ShareFeedbackTitleText" xml:space="preserve">
    <value>Share feedback</value>
    <comment>Titel text of share feedback user carousel card.</comment>
  </data>
</root>