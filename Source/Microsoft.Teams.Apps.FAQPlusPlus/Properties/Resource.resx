<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AskAnExpertFunctionText" xml:space="preserve">
    <value>You can always ask me to connect to an expert, an expert will connect with you:\n Ask an Expert.</value>
    <comment>Letting the user to know about Ask an Expert service.</comment>
  </data>
  <data name="AskAnExpertPlaceholderText" xml:space="preserve">
    <value>Type your detailed question and supporting details here.</value>
    <comment>Ask an Expert placeholder text</comment>
  </data>
  <data name="AskAnExpertText1" xml:space="preserve">
    <value>Ask An Expert</value>
    <comment>Title of the Ask An Expert Card.</comment>
  </data>
  <data name="AskAnExpertText2" xml:space="preserve">
    <value>We have our experts to assist you better  on any of your questions. You can always connect to our Experts.</value>
    <comment>Helps the user in understandig, there is an expert team to connect to.</comment>
  </data>
  <data name="BotName" xml:space="preserve">
    <value>FAQ Bot</value>
    <comment>Name of the BOT</comment>
  </data>
  <data name="BulletedList" xml:space="preserve">
    <value>- 401k\r- Travel Benifits\r-  Leave Policy\r- Health Benifits</value>
    <comment>Bullet List of Available Bot Services</comment>
  </data>
  <data name="BulletedQuestionText" xml:space="preserve">
    <value>- May I know my 401k policy?\n- May I know the Travel Policy of the org?\n-  What about the Leave Policy?\n- What are the Health benefits?</value>
    <comment>Possible questions to be asked by the user to the bot.</comment>
  </data>
  <data name="CollectFeedback" xml:space="preserve">
    <value>Answer the questions suggesting how we can improve our services or just leave the comments.</value>
    <comment>Providing the user with set of questions or comment box  to collect feedback.</comment>
  </data>
  <data name="FeedbackText1" xml:space="preserve">
    <value>We would love to hear a feedback from you on how we have performed today.</value>
    <comment>Text suggests that user is invited to share his feedback on his expereince using bot.</comment>
  </data>
  <data name="FeedbackText2" xml:space="preserve">
    <value>If your experience is unhappy give us the details you have for your question,like your assigned ticket #, one of our experts will connect with you.</value>
    <comment>Asking user for details of his ticket in the event of bad experience or unresolved issues.</comment>
  </data>
  <data name="FunctionCardText1" xml:space="preserve">
    <value>Ask A Question!</value>
    <comment>Explains what bot does and possible questions.</comment>
  </data>
  <data name="FunctionCardText2" xml:space="preserve">
    <value>I am your QnA bot, you can ask me a question and I will answer you back if I know the answer.</value>
    <comment>Suggests the User to ask Question</comment>
  </data>
  <data name="FunctionTopicsText" xml:space="preserve">
    <value>Ask me questions  like:</value>
    <comment>Title Text for the Questions to be asked.</comment>
  </data>
  <data name="MessageText1" xml:space="preserve">
    <value>Here is what I can help you with:</value>
    <comment>MessageLine</comment>
  </data>
  <data name="MessageText2" xml:space="preserve">
    <value>If you are curious about what I can do, just type @FAQBot and I will present the list of commands that I can understand.</value>
    <comment>Message Line to know more about the Bot Functionalities</comment>
  </data>
  <data name="SendDisplayText" xml:space="preserve">
    <value>Send</value>
    <comment>Send button text</comment>
  </data>
  <data name="ShareFeedbackTitleText" xml:space="preserve">
    <value>Share Feedback</value>
    <comment>Title for Feedback card</comment>
  </data>
  <data name="TakeATourButtonText" xml:space="preserve">
    <value>Take a tour</value>
    <comment>Action Button which gives Tour for Bot Functionalities.</comment>
  </data>
  <data name="WelcomeText1" xml:space="preserve">
    <value>Hi there!</value>
    <comment>Greeting Text of Adaptive Card</comment>
  </data>
  <data name="WelcomeText2" xml:space="preserve">
    <value>Hello!   \nI am Sophia I am your friendly HR BOT. I am here to help you with your HR realted topics.</value>
    <comment>Explains What Bot it is.</comment>
  </data>
  <data name="DateText" xml:space="preserve">
    <value>Date: </value>
  </data>
  <data name="DescriptionText" xml:space="preserve">
    <value>Description: </value>
  </data>
  <data name="EmailPlaceholderText" xml:space="preserve">
    <value>{0}</value>
  </data>
  <data name="FeedbackDescriptionPlaceholderText" xml:space="preserve">
    <value>Type your detailed feedback and supporting details here.</value>
  </data>
  <data name="FeedbackHeaderText" xml:space="preserve">
    <value>Feedback</value>
  </data>
  <data name="LastTenRequestsText" xml:space="preserve">
    <value>Following are your last 10 requests:</value>
  </data>
  <data name="NamePlaceholderText" xml:space="preserve">
    <value>{0}</value>
  </data>
  <data name="AnswerLineText" xml:space="preserve">
    <value>Here is what I found : {0}</value>
    <comment>Answer from the Bot</comment>
  </data>
  <data name="QuestionLineText" xml:space="preserve">
    <value>Your Request : {0}</value>
    <comment>Shows user Requested Question</comment>
  </data>
  <data name="RequestText" xml:space="preserve">
    <value>Request #</value>
  </data>
  <data name="StatusText" xml:space="preserve">
    <value>Status: </value>
  </data>
  <data name="AskAnExpertButtonText" xml:space="preserve">
    <value>Ask An Expert</value>
    <comment>Action Button which invokes ask an expert show card.</comment>
  </data>
  <data name="ChatWithRequestor" xml:space="preserve">
    <value>Your Chat Requested User is {0} :</value>
  </data>
  <data name="CompletedDate" xml:space="preserve">
    <value>Your Completed Date is {0} :</value>
  </data>
  <data name="CreatedDate" xml:space="preserve">
    <value>Your Created Date is {0}:</value>
  </data>
  <data name="IncomingAskAnExpertSMECardHeader" xml:space="preserve">
    <value>Your Expert Cardheader is {0} :</value>
  </data>
  <data name="IncomingFeedbackSMECardHeader" xml:space="preserve">
    <value>Your Feedback Cardheader is {0} :</value>
  </data>
  <data name="NotAssigned" xml:space="preserve">
    <value>assigned value is</value>
  </data>
  <data name="RequestIdText" xml:space="preserve">
    <value>Requested Id Text is {0} :</value>
  </data>
  <data name="IncomingAppFeedbackDetailsText" xml:space="preserve">
    <value>Details: {0}</value>
    <comment>The exact details for the incoming app feedback. The placeholder {0} represents the detailed feedback which the user has provided.</comment>
  </data>
  <data name="IncomingFeedbackSubHeaderText" xml:space="preserve">
    <value>{0} shares {1}. The details are as follows:</value>
    <comment>The subheader for the incoming app feedback adaptive card. The placeholder {0} represents the name of the person sharing the feedback. The placeholder {1} represents the feedback type.</comment>
  </data>
  <data name="IncomingAppFeedbackSubjectLine" xml:space="preserve">
    <value>Subject: {0}</value>
    <comment>The subject line for the incoming app feedback adaptive card - and the placeholder {0} represents the exact feedback type</comment>
  </data>
  <data name="SendButtonText" xml:space="preserve">
    <value>App Feedback</value>
  </data>
  <data name="ThankYouAdaptiveCardContent" xml:space="preserve">
    <value>Your feedback has been captured and forwarded over to the team. Someone will get back to you in some time.</value>
    <comment>The content for the thank you adaptive card which is shown whenever there is feedback captured about the app or about a response.</comment>
  </data>
  <data name="ThankYouAdaptiveCardTitleText" xml:space="preserve">
    <value>Thank you!</value>
    <comment>The title text for the thank you adaptive card which is shown whenever there is feedback captured about the app or about a response.</comment>
  </data>
  <data name="ChatTextButton" xml:space="preserve">
    <value>Chat with {0}</value>
    <comment>Ability to chat directy with end user from SME channel.</comment>
  </data>
  <data name="ShareAppFeedbackButtonText" xml:space="preserve">
    <value>Share App Feedback</value>
    <comment>App Feedback Submit Button Title</comment>
  </data>
  <data name="ConfirmationAdaptiveCardContent" xml:space="preserve">
    <value>Your Question has been posted to our expert team.Someone from the team will get back to you in some time.</value>
    <comment>Confirmation Message to the user upon asking question to the expert.</comment>
  </data>
  <data name="ConfirmationCardTitleText" xml:space="preserve">
    <value>Confirmation!</value>
    <comment>Confirmation Card Header Text.</comment>
  </data>
  <data name="TeamChatHeaderText" xml:space="preserve">
    <value>Initiate Chat with Users</value>
    <comment>Team carousel  Chat Card Header-  Title of the chat card.</comment>
  </data>
  <data name="TeamChatCardContent" xml:space="preserve">
    <value>As an SME, you can initiate chat directly with the end user, by clicking on chat button.</value>
    <comment>Team carousel Chat Card content-  SME team members can chat directly with the end users.</comment>
  </data>
  <data name="TeamFunctionCardHeaderText" xml:space="preserve">
    <value>Notification from the Users</value>
    <comment>Team carousel Function Card content- Title of the chat card.</comment>
  </data>
  <data name="TeamFunctionCardContent" xml:space="preserve">
    <value>SME channel receives feedback  from the users on the app performance or can ask a question  to the SME channel.</value>
    <comment>Team carousel Function card content- Team can take the question from the end users through bot.</comment>
  </data>
  <data name="TeamQueryHeaderText" xml:space="preserve">
    <value>Ticket System</value>
    <comment>Title of the Query Carousel Card- Ticket system.</comment>
  </data>
  <data name="TeamQueryCardContent" xml:space="preserve">
    <value>You can Keep track of the user requests using the status assigned or closed.</value>
    <comment>Team carousel Query card content- Team can keep track of the user request.</comment>
  </data>
  <data name="TakeATeamTourButtonText" xml:space="preserve">
    <value>Team Tour</value>
    <comment>Action Button which gives Tour for the team about Bot Functionalities.</comment>
  </data>
  <data name="WelcomeTeamCardTitleText" xml:space="preserve">
    <value>Hello {0} !</value>
    <comment>Introduces Welcome, with team name in the placeholder {0}</comment>
  </data>
  <data name="WelcomeTeamCardContent" xml:space="preserve">
    <value>Hi! I am {0}, thank you for having me in your SME team!.I am a  friendly HR bot can be used by  any team or individual within the org. As an SME, you and your team memebers can do following things using bot.\n- Can Self assign the tickets raised by the users.\n- Can directly chat with end user using chat buttons.\n- Your team can keep track of all the user queries using staus fields like open assign and close.</value>
    <comment>Welcome Message when bot is added to a new team.</comment>
  </data>
  <data name="CustomMessage" xml:space="preserve">
    <value>I didn't find anything. Do you want me to ask an expert.</value>
  </data>
  <data name="ResultAnswerText" xml:space="preserve">
    <value>{0}</value>
    <comment>Pre-filled Answer Text</comment>
  </data>
  <data name="ResultQuestionText" xml:space="preserve">
    <value>Question: {0}</value>
    <comment>Pre-filled Question Text</comment>
  </data>
  <data name="SubmitButtonText" xml:space="preserve">
    <value>Submit</value>
  </data>
  <data name="QuestionForExpertSubHeaderText" xml:space="preserve">
    <value>{0} has asked a question, it's important to take a look at their inquiry!</value>
  </data>
  <data name="Resultsfeedbackdetails" xml:space="preserve">
    <value>Enter Feedback for above Result</value>
  </data>
  <data name="TeamCustomMessage" xml:space="preserve">
    <value>Hi SME Team, you are supposed to take questions from the user. If you want to ask me a question, please install me in your personal scope.To know better about me please  do Team Tour.</value>
    <comment>When SME team member asks bot a questions- a message appears saying that team member is supposed to isntall the bot in personal scope.</comment>
  </data>
  <data name="AssignStatusText" xml:space="preserve">
    <value>Assign</value>
    <comment>Staus of the user Ticket- Assign</comment>
  </data>
  <data name="CloseStatusText" xml:space="preserve">
    <value>Close</value>
    <comment>Staus of the user Ticket- Close</comment>
  </data>
  <data name="OpenStatusText" xml:space="preserve">
    <value>Open</value>
    <comment>Staus of the user Ticket- Open</comment>
  </data>
  <data name="StatusShowCardHeader" xml:space="preserve">
    <value>Status</value>
    <comment>Title of the show card drop down menu: Status</comment>
  </data>
</root>